pipeline
{
	agent any
	environment
	{
		scannerHome = tool name: 'DevOpsSupportScanner', type: 'hudson.plugins.sonar.MsBuildSQRunnerInstallation'   
	}
	options
   {
      timeout(time: 1, unit: 'HOURS')
      
      // Discard old builds after 5 days or 5 builds count.
      buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5'))
	  
	  //To avoid concurrent builds to avoid multiple checkouts
	  disableConcurrentBuilds()
   }
		 
	stages
	{
		stage ('checkout')
		{
			steps
			{
				echo  " ********** Clone starts ******************"
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/hrshitjain/DevOpsSupportPOC.git']]])
			}
		}
		stage ('nuget')
		{
			steps
			{
				echo "************ restoring dependancies **********"
				sh label: '', script: 'dotnet restore'
			}
		}
		stage ('Start sonarqube analysis')
		{
			steps
			{
				echo "*********** starting sonar analysis ***********"
				withSonarQubeEnv('DevOpsSupportCoverage')
			{
				sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:$JOB_NAME /n:$JOB_NAME /v:1.0 "  
			}
                
			}
		}
		stage ('build')
		{
			steps
			{
				echo "************* building the solution **********"
				sh "dotnet build -c Release -o DevOpsSupportPOC/app/build"
			}	
		}
		stage ('SonarQube Analysis end')
		{	
			steps
			{
				echo "*************** Executing Sonar analysis ***********"
			withSonarQubeEnv('DevOpsSupportCoverage')
			{
				sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
			}
			}
		}
		stage ('Release Artifacts')
		{
			steps
			{
				echo "************** Publishing app ***************"
				sh "dotnet publish -c Release -o DevOpsSupportPOC/app/publish"
			}
		}
		stage ('Docker Image')
		{
			steps
			{
				echo "****************** Build Docker image ****************"
				sh returnStdout: true, script: '/bin/docker build --no-cache -t dtr.nagarro.com:443/dotnetcoreapp_harshitjain:${BUILD_NUMBER} .'
			}
		}
		stage ('Push to DTR')
		{
			steps
			{
				echo "***************** Pushing image to Nagarro DTR or Docker Hub **********"
				sh returnStdout: true, script: '/bin/docker push dtr.nagarro.com:443/dotnetcoreapp_harshitjain:${BUILD_NUMBER}'
			}
		}
		stage ('Stop Running container')
		{
			steps
			{
				echo "*************** Removing already running conatiners *****************"
				sh '''
                ContainerID=$(docker ps | grep 5006 | cut -d " " -f 1)
                if [  $ContainerID ]
                then
                    docker stop $ContainerID
                    docker rm -f $ContainerID
                fi
            '''
			}
		}
		stage ('Docker deployment')
		{
			steps
			{
			   echo "*************** Deploying latest war on Docker Containers **************"
			   sh 'docker run --name dotnetcoreapp_harshitjain -d -p 5006:80 dtr.nagarro.com:443/dotnetcoreapp_harshitjain:${BUILD_NUMBER}'
			}
		}
		
	}

	 post {
			always 
			{
				echo "*********** Executing post tasks like Email notifications *****************"
			}
		}
}
